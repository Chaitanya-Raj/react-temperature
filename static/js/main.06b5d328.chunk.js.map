{"version":3,"sources":["Calculator.js","index.js"],"names":["scaleNames","c","f","k","toCelsius","temp","scale","toFahrenheit","toKelvin","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","TemperatureInput","props","handleChange","bind","e","this","onTemperatureChange","target","value","onChange","React","Component","Calculator","handleCelsiusChange","handleFahrenheitChange","handleKelvinChange","state","setState","celsius","fahrenheit","kelvin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAGMA,G,MAAa,CACjBC,EAAG,UACHC,EAAG,aACHC,EAAG,WAGL,SAASC,EAAUC,EAAMC,GACvB,MAAc,MAAVA,EAAqC,GAAbD,EAAO,IAAW,EAC3B,MAAVC,EAAsBD,EAAO,YAAjC,EAGP,SAASE,EAAaF,EAAMC,GAC1B,MAAc,MAAVA,EAA8B,EAAPD,EAAY,EAAI,GACxB,MAAVC,EAAwC,KAAjBD,EAAO,QAAgB,QAAlD,EAGP,SAASG,EAASH,EAAMC,GACtB,MAAc,MAAVA,EAAsBD,EAAO,OACd,MAAVC,GAAuBD,EAAO,IAAM,IAAM,YAA9C,EAGP,SAASI,EAAWC,EAAaJ,EAAOK,GACtC,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAQC,EAAON,GAE9B,OADgBW,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,W,IAGXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAKNC,GACXC,KAAKJ,MAAMK,oBAAoBF,EAAEG,OAAOC,S,+BAIxC,IAAMlB,EAAce,KAAKJ,MAAMX,YACzBJ,EAAQmB,KAAKJ,MAAMf,MACzB,OACE,kCACE,wDAA8BN,EAAWM,GAAzC,KACA,2BAAOsB,MAAOlB,EAAamB,SAAUJ,KAAKH,oB,GAhBnBQ,IAAMC,WA6EtBC,E,kDAtDb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,oBAAsB,EAAKA,oBAAoBV,KAAzB,gBAC3B,EAAKW,uBAAyB,EAAKA,uBAAuBX,KAA5B,gBAC9B,EAAKY,mBAAqB,EAAKA,mBAAmBZ,KAAxB,gBAC1B,EAAKa,MAAQ,CAAE1B,YAAa,GAAIJ,MAAO,KALtB,E,gEAQCI,GAClBe,KAAKY,SAAS,CAAE/B,MAAO,IAAKI,kB,6CAGPA,GACrBe,KAAKY,SAAS,CAAE/B,MAAO,IAAKI,kB,yCAGXA,GACjBe,KAAKY,SAAS,CAAE/B,MAAO,IAAKI,kB,+BAI5B,IAAMJ,EAAQmB,KAAKW,MAAM9B,MACnBI,EAAce,KAAKW,MAAM1B,YACzB4B,EACM,MAAVhC,EAAgBG,EAAWC,EAAaJ,EAAOF,GAAaM,EACxD6B,EACM,MAAVjC,EACIG,EAAWC,EAAaJ,EAAOC,GAC/BG,EACA8B,EACM,MAAVlC,EAAgBG,EAAWC,EAAaJ,EAAOE,GAAYE,EAE7D,OACE,6BACE,kBAAC,EAAD,CACEJ,MAAM,IACNI,YAAa4B,EACbZ,oBAAqBD,KAAKQ,sBAE5B,kBAAC,EAAD,CACE3B,MAAM,IACNI,YAAa6B,EACbb,oBAAqBD,KAAKS,yBAE5B,kBAAC,EAAD,CACE5B,MAAM,IACNI,YAAa8B,EACbd,oBAAqBD,KAAKU,0B,GAhDXL,IAAMC,WCnD/BU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.06b5d328.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Calculator.css\";\n\nconst scaleNames = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\",\n  k: \"Kelvin\",\n};\n\nfunction toCelsius(temp, scale) {\n  if (scale === \"f\") return ((temp - 32) * 5) / 9;\n  else if (scale === \"k\") return temp - 273.15;\n}\n\nfunction toFahrenheit(temp, scale) {\n  if (scale === \"c\") return (temp * 9) / 5 + 32;\n  else if (scale === \"k\") return (temp - 273.15) * 1.8 + 32;\n}\n\nfunction toKelvin(temp, scale) {\n  if (scale === \"c\") return temp + 273.15;\n  else if (scale === \"f\") return (temp - 32) / 1.8 + 273.15;\n}\n\nfunction tryConvert(temperature, scale, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convert(input, scale);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature} onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.handleKelvinChange = this.handleKelvinChange.bind(this);\n    this.state = { temperature: \"\", scale: \"c\" };\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({ scale: \"c\", temperature });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({ scale: \"f\", temperature });\n  }\n\n  handleKelvinChange(temperature) {\n    this.setState({ scale: \"k\", temperature });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius =\n      scale !== \"c\" ? tryConvert(temperature, scale, toCelsius) : temperature;\n    const fahrenheit =\n      scale !== \"f\"\n        ? tryConvert(temperature, scale, toFahrenheit)\n        : temperature;\n    const kelvin =\n      scale !== \"k\" ? tryConvert(temperature, scale, toKelvin) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange}\n        />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange}\n        />\n        <TemperatureInput\n          scale=\"k\"\n          temperature={kelvin}\n          onTemperatureChange={this.handleKelvinChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Calculator from \"./Calculator\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}